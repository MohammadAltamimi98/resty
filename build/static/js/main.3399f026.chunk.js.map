{"version":3,"sources":["components/header/Header.jsx","components/loading/Loading.js","components/results/Results.jsx","components/form/Form.jsx","app.js","index.js"],"names":["Header","Loading","Results","props","data","Form","useState","textArea","settextArea","method","setmethod","url","seturl","request","setrequest","methodHandler","e","target","id","textAreaHandler","onSubmit","preventDefault","formData","handleApiCall","name","type","onChange","value","className","onClick","rows","cols","App","callApi","requestParams","requestBody","setState","headers","count","results","loadingDisplay","state","Fragment","this","React","Component","Main","rootElement","document","getElementById","ReactDOM","render"],"mappings":"+QAUeA,MARf,WACE,OACE,iCACE,0C,MCHS,SAASC,IACtB,OACE,8BACE,qE,oBCUSC,MAXf,SAAiBC,GACf,OAEE,mCACE,kCACE,sBAAK,cAAY,UAAjB,cAA6BA,EAAMC,KAAO,cAAC,IAAD,CAAYA,KAAMD,EAAMC,OAAW,cAACH,EAAD,Y,aCyDtEI,MA9Df,SAAcF,GAEZ,MAAgCG,oBAAS,GAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAA4BF,mBAAS,OAArC,mBAAOG,EAAP,KAAeC,EAAf,KACA,EAAsBJ,mBAAS,IAA/B,mBAAOK,EAAP,KAAYC,EAAZ,KACA,EAA8BN,mBAAS,IAAvC,mBAAOO,EAAP,KAAgBC,EAAhB,KAkBA,SAASC,EAAcC,GACrBN,EAAUM,EAAEC,OAAOC,IACnBV,GAAY,GAUd,SAASW,EAAgBH,GACvBR,GAAY,GACZE,EAAUM,EAAEC,OAAOC,IAGrB,OACE,mCACE,uBAAME,SAlCV,SAAsBJ,GACpBA,EAAEK,iBACF,IAAMC,EAAW,CACfb,OAAQA,EACRE,IAAKA,GAEPR,EAAMoB,cAAcD,EAAUT,IA4B5B,UACE,kCACE,yCACA,uBAAOW,KAAK,MAAMC,KAAK,OAAOC,SA3BtC,SAAoBV,GAClBJ,EAAOI,EAAEC,OAAOU,UA2BV,wBAAQF,KAAK,SAAS,cAAY,SAAlC,oBAEF,wBAAOG,UAAU,UAAjB,UACE,wBAAQV,GAAG,MAAMW,QAASd,EAA1B,iBACA,wBAAQG,GAAG,OAAOW,QAASV,EAA3B,kBACA,wBAAQD,GAAG,MAAMW,QAASV,EAA1B,iBACA,wBAAQD,GAAG,SAASW,QAASd,EAA7B,uBAEDR,GAAY,0BAAUuB,KAAK,KAAKC,KAAK,KAAKL,SAxBjD,SAAwBV,GACtBF,EAAWE,EAAEC,OAAOU,gBCUTK,E,kDArCb,WAAY7B,GAAQ,IAAD,8BACjB,cAAMA,IAQR8B,QAAU,SAACC,EAAeC,GAWxB,EAAKC,SAAS,CAAEhC,KAVH,CACXiC,QAAS,CACP,eAAgB,2BAElBC,MAAO,EACPC,QAAS,CACP,CAAEf,KAAM,eAAgBb,IAAK,2BAC7B,CAAEa,KAAM,eAAgBb,IAAK,6BAGXuB,gBAAeM,gBAAgB,KAlBrD,EAAKC,MAAQ,CACXrC,KAAM,KACN8B,cAAe,GACfM,gBAAgB,GALD,E,0CAwBnB,WACE,OACE,eAAC,IAAME,SAAP,WACE,cAAC,EAAD,IACA,mDAAsBC,KAAKF,MAAMP,cAAczB,UAC/C,wCAAWkC,KAAKF,MAAMP,cAAcvB,OACpC,cAAC,EAAD,CAAMY,cAAeoB,KAAKV,UAC1B,cAAC,EAAD,CAAS7B,KAAMuC,KAAKF,MAAMrC,c,GAhChBwC,IAAMC,WCFlBC,E,4JACJ,WACE,OAAO,cAAC,EAAD,Q,GAFQF,IAAMC,WAMnBE,EAAcC,SAASC,eAAe,QAC5CC,IAASC,OAAO,cAAC,EAAD,IAAUJ,K","file":"static/js/main.3399f026.chunk.js","sourcesContent":["import './Header.scss';\n\nfunction Header() {\n  return (\n    <header>\n      <h1>RESTy</h1>\n    </header>\n  );\n}\n\nexport default Header;\n","import React from 'react';\n\nexport default function Loading() {\n  return (\n    <div>\n      <h1>Loading .... ⌛ ⌛ ⌛</h1>\n    </div>\n  );\n}\n","import './Results.scss';\nimport Loading from '../loading/Loading';\nimport JSONPretty from 'react-json-pretty';\n\nfunction Results(props) {\n  return (\n\n    <>\n      <section>\n        <pre data-testid=\"results\"> {props.data ? <JSONPretty data={props.data} /> : <Loading />}</pre>\n      </section>\n    </>\n\n  );\n}\nexport default Results;\n\n","import './Form.scss';\nimport { useState } from 'react';\n\n\nfunction Form(props) {\n  // we define the states inside the function out of any if statement or other blocks\n  const [textArea, settextArea] = useState(false);\n  const [method, setmethod] = useState('get');\n  const [url, seturl] = useState('');\n  const [request, setrequest] = useState('');\n\n  //function to handle submit\n  function handleSubmit(e) {\n    e.preventDefault();\n    const formData = {\n      method: method,\n      url: url,\n    };\n    props.handleApiCall(formData, request);\n  }\n\n  // function to handle url and update it\n  function urlHandler(e) {\n    seturl(e.target.value);\n  }\n\n  // function to handle method and update it\n  function methodHandler(e) {\n    setmethod(e.target.id);// we can use the id given for each option\n    settextArea(false);\n  }\n\n\n  // function to handle request and update it\n  function requestHandler(e) {\n    setrequest(e.target.value);\n  }\n\n\n  function textAreaHandler(e) {\n    settextArea(true); //here we set the textarea state to the negative of the initial state;\n    setmethod(e.target.id);\n  }\n\n  return (\n    <>\n      <form onSubmit={handleSubmit}>\n        <label >\n          <span>URL: </span>\n          <input name='url' type='text' onChange={urlHandler} />\n          <button type=\"submit\" data-testid=\"my_btn\">GO!</button>\n        </label>\n        <label className=\"methods\">\n          <button id=\"get\" onClick={methodHandler}>GET</button>\n          <button id=\"post\" onClick={textAreaHandler}>POST</button>\n          <button id=\"put\" onClick={textAreaHandler}>PUT</button>\n          <button id=\"delete\" onClick={methodHandler}>DELETE</button>\n        </label>\n        {textArea && <textarea rows='15' cols='35' onChange={requestHandler} />}\n        {/* basically when the show text state is set to true which happens only at the put and post methods this text area will show \"conditional rendering\" */}\n      </form>\n    </>\n  );\n}\n\n\nexport default Form;\n","import React from 'react';\nimport './app.scss';\n\nimport Header from './components/header/Header';\nimport Results from './components/results/Results';\nimport Form from './components/form/Form';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: null,\n      requestParams: {},\n      loadingDisplay: false\n    };\n  }\n\n  callApi = (requestParams, requestBody) => {\n    const data = {\n      headers: {\n        'content-type': 'string application/json'\n      },\n      count: 2,\n      results: [\n        { name: 'fake thing 1', url: 'http://fakethings.com/1' },\n        { name: 'fake thing 2', url: 'http://fakethings.com/2' },\n      ],\n    };\n    this.setState({ data, requestParams, loadingDisplay: true });\n  }\n\n\n  render() {\n    return (\n      <React.Fragment>\n        <Header />\n        <div>Request Method: {this.state.requestParams.method}</div>\n        <div>URL: {this.state.requestParams.url}</div>\n        <Form handleApiCall={this.callApi} />\n        <Results data={this.state.data} />\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './app.js';\n\nclass Main extends React.Component {\n  render() {\n    return <App />;\n  }\n}\n\nconst rootElement = document.getElementById('root');\nReactDOM.render(<Main />, rootElement);\n"],"sourceRoot":""}